package com.lemon.supershop.swp391fa25evdm.refra.VnPay.service;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.lemon.supershop.swp391fa25evdm.order.model.entity.Order;
import com.lemon.supershop.swp391fa25evdm.order.repository.OrderRepo;
import com.lemon.supershop.swp391fa25evdm.payment.model.entity.Payment;
import com.lemon.supershop.swp391fa25evdm.payment.model.enums.PaymentStatus;
import com.lemon.supershop.swp391fa25evdm.payment.repository.PaymentRepo;
import com.lemon.supershop.swp391fa25evdm.refra.VnPay.model.dto.Response.VnpayRes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.transaction.Transactional;

@Service
public class VnpayService {

    @Autowired
    private OrderRepo orderRepo;
    @Autowired
    private PaymentRepo paymentRepo;

    @Value("${vnpay.tmn_code}")
    private String tmnCode;

    @Value("${vnpay.hash_secret}")
    private String hashSecret;

    @Value("${vnpay.url}")
    private String vnpayUrl;

    @Value("${vnpay.return_url}")
    private String returnUrl;

    @Value("${vnpay.api_url:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}")
    private String apiUrl;

    /**
     * T·∫°o URL thanh to√°n VNPay
     *
     * @param orderId M√£ ƒë∆°n h√†ng
     * @param ipAddress IP c·ªßa kh√°ch h√†ng
     * @param bankCode M√£ ng√¢n h√†ng (t√πy ch·ªçn, null n·∫øu ƒë·ªÉ kh√°ch ch·ªçn t·∫°i VNPay)
     * @return URL thanh to√°n
     */
    public VnpayRes createPaymentUrl(String orderId, String ipAddress, String bankCode) throws Exception {
        Optional<Order> order = orderRepo.findById(Integer.valueOf(orderId));

        if (!order.isPresent()) {
            throw new Exception("Order not found with ID: " + orderId);
        }

        long amount = order.get().getTotal();
        String orderInfo = order.get().getDescription();

        // ‚úÖ T·∫°o m√£ giao d·ªãch duy nh·∫•t: orderId + timestamp
        String vnpTxnRef = orderId + "_" + System.currentTimeMillis();

        Optional<Payment> existingPayment = paymentRepo.findByVnpOrderId(orderId);

        if (existingPayment.isPresent()) {
            Payment payment = existingPayment.get();

            if (payment.getPaidStatus() == PaymentStatus.PAID) {
                throw new Exception("Order has already been paid.");
            } else if (payment.getPaidStatus() == PaymentStatus.PENDING) {
                // C·∫≠p nh·∫≠t l·∫°i Payment v·ªõi tr·∫°ng th√°i PENDING
                payment.setPaidStatus(PaymentStatus.PENDING);
                payment.setTransactionCode(null);
                payment.setResponseCode(null);
                payment.setBankCode(null);
                payment.setProviderResponse(null);
                payment.setUpdateAt(new Date());
                paymentRepo.save(payment);
                
                System.out.println("üîÑ Reset existing payment for retry: Order " + orderId);
            }
        } else {
            // ‚úÖ T·∫°o m·ªõi Payment v·ªõi tr·∫°ng th√°i PENDING
            Payment newPayment = new Payment();
            newPayment.setMethod("VNPay");
            newPayment.setPaidStatus(PaymentStatus.PENDING);
            newPayment.setOrder(order.get());
            newPayment.setUser(order.get().getUser());
            newPayment.setVnpOrderId(orderId);
            newPayment.setUpdateAt(new Date());
            paymentRepo.save(newPayment);
            
            System.out.println("‚úÖ Created new payment for order: " + orderId);
        }

        // Build tham s·ªë VNPay
        Map<String, String> vnp_Params = new HashMap<>();

        vnp_Params.put("vnp_Version", "2.1.0");
        vnp_Params.put("vnp_Command", "pay");
        vnp_Params.put("vnp_TmnCode", tmnCode);
        vnp_Params.put("vnp_Amount", String.valueOf(amount * 100)); // VNPay y√™u c·∫ßu s·ªë ti·ªÅn * 100
        vnp_Params.put("vnp_CurrCode", "VND");
        vnp_Params.put("vnp_TxnRef", vnpTxnRef); // ‚úÖ S·ª≠ d·ª•ng m√£ giao d·ªãch duy nh·∫•t
        vnp_Params.put("vnp_OrderInfo", orderInfo + " - Order: " + orderId); // ‚úÖ Th√™m orderId ƒë·ªÉ tra c·ª©u
        vnp_Params.put("vnp_OrderType", "other");

        // Th√™m vnp_BankCode n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (t√πy ch·ªçn)
        // N·∫øu kh√¥ng c√≥, kh√°ch h√†ng s·∫Ω ch·ªçn ng√¢n h√†ng t·∫°i trang VNPay
        if (bankCode != null && !bankCode.isEmpty()) {
            vnp_Params.put("vnp_BankCode", bankCode);
        }
        vnp_Params.put("vnp_Locale", "vn");
        vnp_Params.put("vnp_ReturnUrl", returnUrl);
        vnp_Params.put("vnp_IpAddr", ipAddress);

        // T·∫°o th·ªùi gian
        Calendar cld = Calendar.getInstance(TimeZone.getTimeZone("Etc/GMT+7"));
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        String vnp_CreateDate = formatter.format(cld.getTime());
        vnp_Params.put("vnp_CreateDate", vnp_CreateDate);

        cld.add(Calendar.MINUTE, 15); // H·∫øt h·∫°n sau 15 ph√∫t
        String vnp_ExpireDate = formatter.format(cld.getTime());
        vnp_Params.put("vnp_ExpireDate", vnp_ExpireDate);

        // Build query string v√† t·∫°o secure hash
        List<String> fieldNames = new ArrayList<>(vnp_Params.keySet());
        Collections.sort(fieldNames);

        StringBuilder hashData = new StringBuilder();
        StringBuilder query = new StringBuilder();

        Iterator<String> itr = fieldNames.iterator();
        while (itr.hasNext()) {
            String fieldName = itr.next();
            String fieldValue = vnp_Params.get(fieldName);

            if ((fieldValue != null) && (fieldValue.length() > 0)) {
                // Build hash data
                hashData.append(fieldName);
                hashData.append('=');
                hashData.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));

                // Build query
                query.append(URLEncoder.encode(fieldName, StandardCharsets.US_ASCII.toString()));
                query.append('=');
                query.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));

                if (itr.hasNext()) {
                    query.append('&');
                    hashData.append('&');
                }
            }
        }

        String queryUrl = query.toString();
        String vnp_SecureHash = hmacSHA512(hashSecret, hashData.toString());
        queryUrl += "&vnp_SecureHash=" + vnp_SecureHash;
        String url = vnpayUrl + "?" + queryUrl;
        // VnpayRes res = new VnpayRes(orderId, amount, bankCode, url);
        // return res;
        //    return vnpayUrl + "?" + queryUrl;
        return new VnpayRes(orderId, amount, bankCode, url);
    }

    /**
     * Verify v√† x·ª≠ l√Ω callback t·ª´ VNPay
     */
    @Transactional
    public Map<String, String> handleCallback(HttpServletRequest request) {
        Map<String, String> result = new HashMap<>();

        try {
            // L·∫•y t·∫•t c·∫£ parameters t·ª´ VNPay
            Map<String, String> params = new HashMap<>();
            for (String key : request.getParameterMap().keySet()) {
                params.put(key, request.getParameter(key));
            }

            System.out.println("üì® Received callback from VNPay:");
            System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
            System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
            System.out.println("   TransactionNo: " + params.get("vnp_TransactionNo"));

            // 1. Verify signature
            if (!verifyCallback(params)) {
                result.put("status", "error");
                result.put("message", "Invalid signature");
                System.err.println("‚ùå Invalid signature from VNPay");
                return result;
            }

            // 2. L·∫•y th√¥ng tin t·ª´ callback
            String vnpTxnRef = params.get("vnp_TxnRef");
            String vnpAmount = params.get("vnp_Amount");
            String vnpTransactionNo = params.get("vnp_TransactionNo");
            String vnpBankCode = params.get("vnp_BankCode");
            String vnpResponseCode = params.get("vnp_ResponseCode");

            // 3. T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp)
            String orderId = vnpTxnRef.split("_")[0];

            // 4. C·∫≠p nh·∫≠t Payment trong DB
            savePayment(vnpTxnRef, vnpAmount, vnpTransactionNo, vnpBankCode, vnpResponseCode);

            // 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£
            if ("00".equals(vnpResponseCode)) {
                result.put("status", "success");
                result.put("message", "Payment successful");
                result.put("orderId", orderId);
                result.put("transactionNo", vnpTransactionNo);
            } else {
                result.put("status", "failed");
                result.put("message", "Payment failed: " + getResponseCodeMessage(vnpResponseCode));
                result.put("orderId", orderId);
                result.put("responseCode", vnpResponseCode);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error processing callback: " + e.getMessage());
            e.printStackTrace();
            result.put("status", "error");
            result.put("message", "Internal error: " + e.getMessage());
        }

        return result;
    }

    /**
     * Verify callback t·ª´ VNPay
     *
     * @param params C√°c tham s·ªë t·ª´ VNPay callback
     * @return true n·∫øu signature h·ª£p l·ªá
     */
    public boolean verifyCallback(Map<String, String> params) {
        String vnp_SecureHash = params.get("vnp_SecureHash");
        params.remove("vnp_SecureHash");
        params.remove("vnp_SecureHashType");

        // Build hash data
        List<String> fieldNames = new ArrayList<>(params.keySet());
        Collections.sort(fieldNames);

        StringBuilder hashData = new StringBuilder();
        Iterator<String> itr = fieldNames.iterator();

        while (itr.hasNext()) {
            String fieldName = itr.next();
            String fieldValue = params.get(fieldName);
            if ((fieldValue != null) && (fieldValue.length() > 0)) {
                hashData.append(fieldName);
                hashData.append('=');
                try {
                    hashData.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
                if (itr.hasNext()) {
                    hashData.append('&');
                }
            }
        }

        String calculatedHash = hmacSHA512(hashSecret, hashData.toString());
        return calculatedHash.equals(vnp_SecureHash);
    }

    @Transactional
    public void savePayment(String vnp_TxnRef, String vnp_Amount, String vnp_TransactionNo, String vnp_BankCode, String vnp_ResponseCode) {
        // ‚úÖ T√°ch orderId t·ª´ vnp_TxnRef (format: orderId_timestamp)
        String orderId = vnp_TxnRef.split("_")[0];

        // T√¨m Payment trong DB b·∫±ng orderId
        Optional<Payment> payment = paymentRepo.findByVnpOrderId(orderId);
        if (payment.isPresent()) {
            // T·∫°o chu·ªói th√¥ng tin ph·∫£n h·ªìi
            String providerResponse = String.format("TxnRef=%s, Amount=%s, TransactionNo=%s, BankCode=%s, ResponseCode=%s",
                    vnp_TxnRef, vnp_Amount, vnp_TransactionNo, vnp_BankCode, vnp_ResponseCode);

            // 4. ‚úÖ UPDATE DB (gi·ªëng callback, v√¨ localhost kh√¥ng nh·∫≠n IPN)
            if ("00".equals(vnp_ResponseCode)) {
                // Thanh to√°n th√†nh c√¥ng
                payment.get().setPaidStatus(PaymentStatus.PAID);
                payment.get().setTransactionCode(vnp_TransactionNo);
                payment.get().setResponseCode(vnp_ResponseCode);
                payment.get().setBankCode(vnp_BankCode);
                payment.get().setUpdateAt(new Date());
                payment.get().setProviderResponse(providerResponse);
                paymentRepo.save(payment.get());

                System.out.println("‚úÖ Payment successful (return): " + vnp_TxnRef);
            } else {
                // Thanh to√°n th·∫•t b·∫°i
                payment.get().setPaidStatus(PaymentStatus.FAILED);
                payment.get().setResponseCode(vnp_ResponseCode);
                payment.get().setUpdateAt(new Date());
                payment.get().setProviderResponse(providerResponse);
                paymentRepo.save(payment.get());

                System.out.println("‚ùå Payment failed (return): " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
            }
        }
    }

    /**
     * T√≠nh HMAC SHA512
     */
    private String hmacSHA512(String key, String data) {
        try {
            Mac hmac512 = Mac.getInstance("HmacSHA512");
            SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "HmacSHA512");
            hmac512.init(secretKey);
            byte[] result = hmac512.doFinal(data.getBytes(StandardCharsets.UTF_8));

            StringBuilder sb = new StringBuilder();
            for (byte b : result) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Failed to calculate HMAC SHA512", e);
        }
    }

    /**
     * L·∫•y IP address t·ª´ request
     */
    public String getIpAddress(jakarta.servlet.http.HttpServletRequest request) {
        String ipAddress = request.getHeader("X-FORWARDED-FOR");
        if (ipAddress == null || ipAddress.isEmpty()) {
            ipAddress = request.getRemoteAddr();
        }
        return ipAddress;
    }

    /**
     * L·∫•y message t·ª´ response code - public ƒë·ªÉ Controller c√≥ th·ªÉ d√πng
     */
    public String getResponseCodeMessage(String responseCode) {
        Map<String, String> messages = new HashMap<>();
        messages.put("00", "Giao d·ªãch th√†nh c√¥ng");
        messages.put("07", "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).");
        messages.put("09", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.");
        messages.put("10", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn");
        messages.put("11", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.");
        messages.put("12", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.");
        messages.put("13", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP).");
        messages.put("24", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch");
        messages.put("51", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.");
        messages.put("65", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.");
        messages.put("75", "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.");
        messages.put("79", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.");
        messages.put("99", "C√°c l·ªói kh√°c");

        return messages.getOrDefault(responseCode, "Unknown error code: " + responseCode);
    }
}
