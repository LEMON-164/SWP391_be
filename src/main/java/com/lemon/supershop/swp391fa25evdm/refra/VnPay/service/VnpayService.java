package com.lemon.supershop.swp391fa25evdm.refra.VnPay.service;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.lemon.supershop.swp391fa25evdm.order.model.entity.Order;
import com.lemon.supershop.swp391fa25evdm.order.repository.OrderRepo;
import com.lemon.supershop.swp391fa25evdm.payment.model.entity.Payment;
import com.lemon.supershop.swp391fa25evdm.payment.model.enums.PaymentStatus;
import com.lemon.supershop.swp391fa25evdm.payment.repository.PaymentRepo;
import com.lemon.supershop.swp391fa25evdm.refra.VnPay.model.dto.Response.VnpayRes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.transaction.Transactional;

/**
 * Service x·ª≠ l√Ω t√≠ch h·ª£p thanh to√°n VNPay
 *
 * Ch·ª©c nƒÉng ch√≠nh: - T·∫°o URL thanh to√°n VNPay - X√°c th·ª±c callback t·ª´ VNPay -
 * L∆∞u th√¥ng tin thanh to√°n v√†o database - X·ª≠ l√Ω c√°c response code t·ª´ VNPay
 *
 * @author LEMON-164
 * @version 1.0
 * @since 2025-01-29
 */
@Service
public class VnpayService {

    // ============================================
    // DEPENDENCIES & CONFIGURATIONS
    // ============================================
    @Autowired
    private OrderRepo orderRepo;

    @Autowired
    private PaymentRepo paymentRepo;

    /**
     * M√£ website c·ªßa merchant (ƒë∆∞·ª£c VNPay c·∫•p) VD: VLOICMA9
     */
    @Value("${vnpay.tmn_code}")
    private String tmnCode;

    /**
     * Secret key ƒë·ªÉ t·∫°o ch·ªØ k√Ω ƒëi·ªán t·ª≠ (ƒë∆∞·ª£c VNPay c·∫•p) D√πng ƒë·ªÉ m√£ h√≥a v√† x√°c
     * th·ª±c d·ªØ li·ªáu
     */
    @Value("${vnpay.hash_secret}")
    private String hashSecret;

    /**
     * URL thanh to√°n c·ªßa VNPay Sandbox:
     * https://sandbox.vnpayment.vn/paymentv2/vpcpay.html Production:
     * https://vnpayment.vn/paymentv2/vpcpay.html
     */
    @Value("${vnpay.url}")
    private String vnpayUrl;

    /**
     * URL ƒë·ªÉ VNPay redirect sau khi thanh to√°n - Test (kh√¥ng c√≥ FE):
     * http://localhost:6969/api/vnpay/return - Production (c√≥ FE):
     * http://localhost:3000/payment/vnpay-return thay ƒë·ªïi trong
     * application.properties
     */
    @Value("${vnpay.return_url}")
    private String returnUrl;

    /**
     * URL API c·ªßa VNPay ƒë·ªÉ query transaction D√πng cho c√°c API nh∆∞ refund, query
     * payment status
     */
    @Value("${vnpay.api_url:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}")
    private String apiUrl;

    // ============================================
    // MAIN BUSINESS METHODS
    // ============================================
    /**
     * T·∫°o URL thanh to√°n VNPay
     *
     * Lu·ªìng x·ª≠ l√Ω: 1. Ki·ªÉm tra Order c√≥ t·ªìn t·∫°i kh√¥ng 2. T·∫°o m√£ giao d·ªãch duy
     * nh·∫•t (orderId + timestamp) 3. T·∫°o/Reset Payment record trong DB v·ªõi
     * status PENDING 4. Build parameters theo spec VNPay 5. T·∫°o secure hash
     * (HMAC SHA512) 6. Return URL thanh to√°n ho√†n ch·ªânh
     *
     * @param orderId M√£ ƒë∆°n h√†ng c·∫ßn thanh to√°n
     * @param ipAddress IP address c·ªßa kh√°ch h√†ng (b·∫Øt bu·ªôc theo VNPay)
     * @param bankCode M√£ ng√¢n h√†ng (optional: NCB, VIETCOMBANK, AGRIBANK...) -
     * N·∫øu null: kh√°ch ch·ªçn ng√¢n h√†ng t·∫°i trang VNPay - N·∫øu c√≥: redirect th·∫≥ng
     * ƒë·∫øn ng√¢n h√†ng ƒë√≥
     * @return VnpayRes ch·ª©a URL thanh to√°n v√† th√¥ng tin ƒë∆°n h√†ng
     * @throws Exception n·∫øu Order kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c thanh to√°n
     */
    public VnpayRes createPaymentUrl(String orderId, String ipAddress, String bankCode) throws Exception {
        // B∆Ø·ªöC 1: Validate Order
        Optional<Order> orderOpt = orderRepo.findById(Integer.valueOf(orderId));
        if (!orderOpt.isPresent()) {
            throw new Exception("Order not found with ID: " + orderId);
        }

        Order order = orderOpt.get();
        long amount = order.getTotal(); // S·ªë ti·ªÅn thanh to√°n (VND)
        String orderInfo = order.getDescription(); // Th√¥ng tin ƒë∆°n h√†ng

        // B∆Ø·ªöC 2: T·∫°o m√£ giao d·ªãch duy nh·∫•t
        // Format: orderId_timestamp
        // VD: 1_1735459200000
        // L√Ω do: VNPay y√™u c·∫ßu m·ªói giao d·ªãch ph·∫£i c√≥ m√£ duy nh·∫•t
        String vnpTxnRef = orderId + "_" + System.currentTimeMillis();

        // B∆Ø·ªöC 3: X·ª≠ l√Ω Payment record trong DB
        Optional<Payment> existingPayment = paymentRepo.findByVnpOrderId(orderId);

        if (existingPayment.isPresent()) {
            Payment payment = existingPayment.get();

            // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
            if (payment.getPaidStatus() == PaymentStatus.PAID) {
                // ƒê∆°n h√†ng ƒë√£ thanh to√°n ‚Üí Kh√¥ng cho ph√©p thanh to√°n l·∫°i
                throw new Exception("Order has already been paid.");
            } else if (payment.getPaidStatus() == PaymentStatus.PENDING
                    || payment.getPaidStatus() == PaymentStatus.FAILED) {
                // Payment ƒëang PENDING/FAILED ‚Üí Reset ƒë·ªÉ th·ª≠ l·∫°i
                payment.setPaidStatus(PaymentStatus.PENDING);
                payment.setTransactionCode(null);
                payment.setResponseCode(null);
                payment.setBankCode(null);
                payment.setProviderResponse(null);
                payment.setUpdateAt(new Date());
                paymentRepo.save(payment);

                System.out.println("üîÑ Reset existing payment for retry: Order " + orderId);
            }
        } else {
            // Ch∆∞a c√≥ Payment ‚Üí T·∫°o m·ªõi v·ªõi status PENDING
            Payment newPayment = new Payment();
            newPayment.setMethod("VNPay");
            newPayment.setPaidStatus(PaymentStatus.PENDING);
            newPayment.setOrder(order);
            newPayment.setUser(order.getUser());
            newPayment.setVnpOrderId(orderId);
            newPayment.setUpdateAt(new Date());
            paymentRepo.save(newPayment);

            System.out.println("‚úÖ Created new payment for order: " + orderId);
        }

        // B∆Ø·ªöC 4: Build parameters theo VNPay specification
        Map<String, String> vnpParams = new HashMap<>();

        // Th√¥ng tin c∆° b·∫£n
        vnpParams.put("vnp_Version", "2.1.0");          // Phi√™n b·∫£n API VNPay
        vnpParams.put("vnp_Command", "pay");            // L·ªánh thanh to√°n
        vnpParams.put("vnp_TmnCode", tmnCode);          // M√£ website merchant

        // Th√¥ng tin giao d·ªãch
        vnpParams.put("vnp_Amount", String.valueOf(amount * 100)); // VNPay y√™u c·∫ßu: s·ªë ti·ªÅn * 100
        vnpParams.put("vnp_CurrCode", "VND");                      // Lo·∫°i ti·ªÅn t·ªá
        vnpParams.put("vnp_TxnRef", vnpTxnRef);                    // M√£ giao d·ªãch duy nh·∫•t
        vnpParams.put("vnp_OrderInfo", orderInfo + " - Order: " + orderId); // Th√¥ng tin ƒë∆°n h√†ng
        vnpParams.put("vnp_OrderType", "other");                   // Lo·∫°i ƒë∆°n h√†ng

        // Ng√¢n h√†ng (optional)
        if (bankCode != null && !bankCode.isEmpty()) {
            vnpParams.put("vnp_BankCode", bankCode); // N·∫øu c√≥: redirect th·∫≥ng ƒë·∫øn bank
        }

        // C·∫•u h√¨nh return
        vnpParams.put("vnp_Locale", "vn");              // Ng√¥n ng·ªØ: vn/en
        vnpParams.put("vnp_ReturnUrl", returnUrl);      // URL callback sau khi thanh to√°n
        vnpParams.put("vnp_IpAddr", ipAddress);         // IP c·ªßa kh√°ch h√†ng (b·∫Øt bu·ªôc)

        // B∆Ø·ªöC 5: T·∫°o th·ªùi gian
        // Timezone: GMT+7 (Vi·ªát Nam)
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("Etc/GMT+7"));
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");

        // Th·ªùi gian t·∫°o giao d·ªãch
        String vnpCreateDate = formatter.format(calendar.getTime());
        vnpParams.put("vnp_CreateDate", vnpCreateDate);

        // Th·ªùi gian h·∫øt h·∫°n (15 ph√∫t sau)
        calendar.add(Calendar.MINUTE, 15);
        String vnpExpireDate = formatter.format(calendar.getTime());
        vnpParams.put("vnp_ExpireDate", vnpExpireDate);

        // B∆Ø·ªöC 6: Build query string v√† hash
        String queryUrl = buildQueryString(vnpParams);
        String secureHash = hmacSHA512(hashSecret, buildHashData(vnpParams));

        // Th√™m secure hash v√†o query string
        queryUrl += "&vnp_SecureHash=" + secureHash;

        // B∆Ø·ªöC 7: T·∫°o URL thanh to√°n ho√†n ch·ªânh
        String paymentUrl = vnpayUrl + "?" + queryUrl;

        System.out.println("üîó Payment URL created for order: " + orderId);
        System.out.println("üìù TxnRef: " + vnpTxnRef);

        return new VnpayRes(orderId, amount, bankCode, paymentUrl);
    }

    /**
     * X√°c th·ª±c v√† x·ª≠ l√Ω callback t·ª´ VNPay
     *
     * Method n√†y x·ª≠ l√Ω khi VNPay redirect v·ªÅ sau khi kh√°ch thanh to√°n
     *
     * Lu·ªìng x·ª≠ l√Ω: 1. L·∫•y t·∫•t c·∫£ parameters t·ª´ request 2. Verify signature ƒë·ªÉ
     * ƒë·∫£m b·∫£o data kh√¥ng b·ªã gi·∫£ m·∫°o 3. T√°ch orderId t·ª´ vnpTxnRef 4. L∆∞u th√¥ng
     * tin thanh to√°n v√†o DB 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£
     *
     * @param request HttpServletRequest ch·ª©a callback params t·ª´ VNPay
     * @return Map ch·ª©a status v√† message
     */
    @Transactional
    public Map<String, String> handleCallback(HttpServletRequest request) {
        Map<String, String> result = new HashMap<>();

        try {
            // B∆Ø·ªöC 1: Extract t·∫•t c·∫£ parameters t·ª´ request
            Map<String, String> params = new HashMap<>();
            for (String key : request.getParameterMap().keySet()) {
                params.put(key, request.getParameter(key));
            }

            System.out.println("üì® Received callback from VNPay:");
            System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
            System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
            System.out.println("   TransactionNo: " + params.get("vnp_TransactionNo"));

            // B∆Ø·ªöC 2: Verify signature ƒë·ªÉ ƒë·∫£m b·∫£o data integrity
            if (!verifyCallback(params)) {
                result.put("status", "error");
                result.put("message", "Invalid signature");
                System.err.println("‚ùå Invalid signature from VNPay");
                return result;
            }

            // B∆Ø·ªöC 3: L·∫•y th√¥ng tin t·ª´ callback
            String vnpTxnRef = params.get("vnp_TxnRef");           // M√£ giao d·ªãch
            String vnpAmount = params.get("vnp_Amount");            // S·ªë ti·ªÅn (x100)
            String vnpTransactionNo = params.get("vnp_TransactionNo"); // M√£ GD VNPay
            String vnpBankCode = params.get("vnp_BankCode");        // M√£ ng√¢n h√†ng
            String vnpResponseCode = params.get("vnp_ResponseCode"); // M√£ k·∫øt qu·∫£

            // B∆Ø·ªöC 4: T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp)
            String orderId = vnpTxnRef.split("_")[0];

            // B∆Ø·ªöC 5: C·∫≠p nh·∫≠t Payment trong database
            savePayment(vnpTxnRef, vnpAmount, vnpTransactionNo, vnpBankCode, vnpResponseCode);

            // B∆Ø·ªöC 6: Build response
            if ("00".equals(vnpResponseCode)) {
                // Thanh to√°n th√†nh c√¥ng
                result.put("status", "success");
                result.put("message", "Payment successful");
                result.put("orderId", orderId);
                result.put("transactionNo", vnpTransactionNo);
            } else {
                // Thanh to√°n th·∫•t b·∫°i
                result.put("status", "failed");
                result.put("message", "Payment failed: " + getResponseCodeMessage(vnpResponseCode));
                result.put("orderId", orderId);
                result.put("responseCode", vnpResponseCode);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error processing callback: " + e.getMessage());
            e.printStackTrace();
            result.put("status", "error");
            result.put("message", "Internal error: " + e.getMessage());
        }

        return result;
    }

    /**
     * X√°c th·ª±c ch·ªØ k√Ω ƒëi·ªán t·ª≠ t·ª´ VNPay
     *
     * VNPay s·ª≠ d·ª•ng HMAC SHA512 ƒë·ªÉ t·∫°o ch·ªØ k√Ω C·∫ßn so s√°nh ch·ªØ k√Ω nh·∫≠n ƒë∆∞·ª£c v·ªõi
     * ch·ªØ k√Ω t√≠nh to√°n
     *
     * L∆∞u √Ω: - Ph·∫£i remove vnp_SecureHash v√† vnp_SecureHashType tr∆∞·ªõc khi
     * verify - Params ph·∫£i ƒë∆∞·ª£c sort theo alphabet - S·ª≠ d·ª•ng c√πng hash secret
     * v·ªõi l√∫c t·∫°o payment
     *
     * @param params Parameters t·ª´ VNPay callback
     * @return true n·∫øu signature h·ª£p l·ªá, false n·∫øu kh√¥ng h·ª£p l·ªá
     */
    public boolean verifyCallback(Map<String, String> params) {
        // B∆Ø·ªöC 1: L·∫•y secure hash t·ª´ VNPay
        String vnpSecureHash = params.get("vnp_SecureHash");

        // B∆Ø·ªöC 2: T·∫°o b·∫£n copy v√† remove c√°c field kh√¥ng c·∫ßn verify
        Map<String, String> verifyParams = new HashMap<>(params);
        verifyParams.remove("vnp_SecureHash");
        verifyParams.remove("vnp_SecureHashType");

        // B∆Ø·ªöC 3: T√≠nh hash t·ª´ params nh·∫≠n ƒë∆∞·ª£c
        String calculatedHash = hmacSHA512(hashSecret, buildHashData(verifyParams));

        // B∆Ø·ªöC 4: So s√°nh hash
        boolean isValid = calculatedHash.equals(vnpSecureHash);
        System.out.println("üîê Signature verification: " + (isValid ? "VALID ‚úÖ" : "INVALID ‚ùå"));

        return isValid;
    }

    /**
     * L∆∞u th√¥ng tin thanh to√°n v√†o database
     *
     * Method n√†y c·∫≠p nh·∫≠t Payment record v·ªõi th√¥ng tin t·ª´ VNPay: - N·∫øu thanh
     * to√°n th√†nh c√¥ng (code 00): status = PAID - N·∫øu th·∫•t b·∫°i: status = FAILED
     *
     * @param vnpTxnRef M√£ giao d·ªãch (format: orderId_timestamp)
     * @param vnpAmount S·ªë ti·ªÅn (ƒë√£ nh√¢n 100)
     * @param vnpTransactionNo M√£ giao d·ªãch VNPay
     * @param vnpBankCode M√£ ng√¢n h√†ng
     * @param vnpResponseCode M√£ k·∫øt qu·∫£ t·ª´ VNPay
     */
    @Transactional
    public void savePayment(String vnpTxnRef, String vnpAmount, String vnpTransactionNo,
            String vnpBankCode, String vnpResponseCode) {
        // B∆Ø·ªöC 1: T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp)
        String orderId = vnpTxnRef.split("_")[0];

        // B∆Ø·ªöC 2: T√¨m Payment trong database
        Optional<Payment> paymentOpt = paymentRepo.findByVnpOrderId(orderId);

        if (!paymentOpt.isPresent()) {
            System.err.println("‚ùå Payment not found for order: " + orderId);
            return;
        }

        Payment payment = paymentOpt.get();

        // B∆Ø·ªöC 3: T·∫°o chu·ªói provider response ƒë·ªÉ l∆∞u tr·ªØ
        String providerResponse = String.format(
                "TxnRef=%s, Amount=%s, TransactionNo=%s, BankCode=%s, ResponseCode=%s",
                vnpTxnRef, vnpAmount, vnpTransactionNo, vnpBankCode, vnpResponseCode
        );

        // B∆Ø·ªöC 4: C·∫≠p nh·∫≠t Payment based on response code
        if ("00".equals(vnpResponseCode)) {
            // ‚úÖ Thanh to√°n th√†nh c√¥ng
            payment.setPaidStatus(PaymentStatus.PAID);
            payment.setTransactionCode(vnpTransactionNo);
            payment.setResponseCode(vnpResponseCode);
            payment.setBankCode(vnpBankCode);
            payment.setUpdateAt(new Date());
            payment.setProviderResponse(providerResponse);

            System.out.println("‚úÖ Payment successful: Order " + orderId + " (TxnRef: " + vnpTxnRef + ")");

            // üîÑ C·∫≠p nh·∫≠t Order status sang "Paid"
            Order order = payment.getOrder();
            if (order != null) {
                order.setStatus("Paid");
                orderRepo.save(order);
                System.out.println("‚úÖ Order status updated to 'Paid': Order " + orderId);
            }

            System.out.println("‚úÖ Payment successful: Order " + orderId + " (TxnRef: " + vnpTxnRef + ")");
        } else {
            // ‚ùå Thanh to√°n th·∫•t b·∫°i
            payment.setPaidStatus(PaymentStatus.FAILED);
            payment.setResponseCode(vnpResponseCode);
            payment.setUpdateAt(new Date());
            payment.setProviderResponse(providerResponse);

            System.out.println("‚ùå Payment failed: Order " + orderId + " - Code: " + vnpResponseCode);

            // üîÑ C·∫≠p nh·∫≠t Order status sang "Failed"
            Order order = payment.getOrder();
            if (order != null) {
                order.setStatus("Failed");
                orderRepo.save(order);
                System.out.println("üîÑ Order status updated to 'Failed': Order " + orderId);
            }
        }

        // B∆Ø·ªöC 5: L∆∞u v√†o database
        paymentRepo.save(payment);
        System.out.println("üíæ Payment saved to database");
    }

    // ============================================
    // HELPER METHODS - SECURITY & ENCODING
    // ============================================
    /**
     * Build hash data string t·ª´ parameters
     *
     * VNPay y√™u c·∫ßu: - Sort parameters theo alphabet - Format:
     * field1=value1&field2=value2&... - URL encode values theo US_ASCII - B·ªè
     * qua c√°c field null ho·∫∑c empty
     *
     * @param params Map ch·ª©a parameters
     * @return String hash data theo spec VNPay
     */
    private String buildHashData(Map<String, String> params) {
        // B∆Ø·ªöC 1: Sort parameters theo alphabet
        List<String> fieldNames = new ArrayList<>(params.keySet());
        Collections.sort(fieldNames);

        StringBuilder hashData = new StringBuilder();
        Iterator<String> itr = fieldNames.iterator();

        // B∆Ø·ªöC 2: Build hash string
        while (itr.hasNext()) {
            String fieldName = itr.next();
            String fieldValue = params.get(fieldName);

            // Ch·ªâ th√™m field kh√¥ng null v√† kh√¥ng empty
            if (fieldValue != null && !fieldValue.isEmpty()) {
                hashData.append(fieldName);
                hashData.append('=');
                try {
                    // URL encode theo US_ASCII (y√™u c·∫ßu VNPay)
                    hashData.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException("Error encoding field: " + fieldName, e);
                }

                // Th√™m & n·∫øu ch∆∞a ph·∫£i field cu·ªëi
                if (itr.hasNext()) {
                    hashData.append('&');
                }
            }
        }

        return hashData.toString();
    }

    /**
     * Build query string t·ª´ parameters
     *
     * T∆∞∆°ng t·ª± buildHashData nh∆∞ng encode c·∫£ field name D√πng ƒë·ªÉ t·∫°o URL query
     * string
     *
     * @param params Map ch·ª©a parameters
     * @return String query theo format URL
     */
    private String buildQueryString(Map<String, String> params) {
        // B∆Ø·ªöC 1: Sort parameters
        List<String> fieldNames = new ArrayList<>(params.keySet());
        Collections.sort(fieldNames);

        StringBuilder query = new StringBuilder();
        Iterator<String> itr = fieldNames.iterator();

        // B∆Ø·ªöC 2: Build query string
        while (itr.hasNext()) {
            String fieldName = itr.next();
            String fieldValue = params.get(fieldName);

            if (fieldValue != null && !fieldValue.isEmpty()) {
                try {
                    // Encode c·∫£ field name v√† value
                    query.append(URLEncoder.encode(fieldName, StandardCharsets.US_ASCII.toString()));
                    query.append('=');
                    query.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException("Error encoding field: " + fieldName, e);
                }

                if (itr.hasNext()) {
                    query.append('&');
                }
            }
        }

        return query.toString();
    }

    /**
     * T√≠nh HMAC SHA512 hash
     *
     * Thu·∫≠t to√°n m√£ h√≥a ƒë∆∞·ª£c VNPay s·ª≠ d·ª•ng - Input: Secret key + Data string -
     * Output: Hash string d·∫°ng hex (lowercase)
     *
     * @param key Secret key (hash_secret t·ª´ VNPay)
     * @param data Data string c·∫ßn hash
     * @return Hash string d·∫°ng hex
     * @throws RuntimeException n·∫øu c√≥ l·ªói trong qu√° tr√¨nh hash
     */
    private String hmacSHA512(String key, String data) {
        try {
            // B∆Ø·ªöC 1: Kh·ªüi t·∫°o Mac instance v·ªõi thu·∫≠t to√°n HmacSHA512
            Mac hmac512 = Mac.getInstance("HmacSHA512");

            // B∆Ø·ªöC 2: T·∫°o secret key
            SecretKeySpec secretKey = new SecretKeySpec(
                    key.getBytes(StandardCharsets.UTF_8),
                    "HmacSHA512"
            );

            // B∆Ø·ªöC 3: Init Mac v·ªõi secret key
            hmac512.init(secretKey);

            // B∆Ø·ªöC 4: T√≠nh hash
            byte[] result = hmac512.doFinal(data.getBytes(StandardCharsets.UTF_8));

            // B∆Ø·ªöC 5: Convert byte array sang hex string
            StringBuilder sb = new StringBuilder();
            for (byte b : result) {
                sb.append(String.format("%02x", b)); // Format hex lowercase
            }

            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Failed to calculate HMAC SHA512", e);
        }
    }

    // ============================================
    // UTILITY METHODS
    // ============================================
    /**
     * L·∫•y IP address t·ª´ HTTP request
     *
     * ∆Øu ti√™n l·∫•y t·ª´ X-FORWARDED-FOR header (n·∫øu qua proxy/load balancer)
     * Fallback v·ªÅ getRemoteAddr() n·∫øu kh√¥ng c√≥ header
     *
     * @param request HTTP request
     * @return IP address c·ªßa client
     */
    public String getIpAddress(HttpServletRequest request) {
        // Ki·ªÉm tra X-FORWARDED-FOR header (n·∫øu qua proxy)
        String ipAddress = request.getHeader("X-FORWARDED-FOR");

        // N·∫øu kh√¥ng c√≥, l·∫•y t·ª´ remote address
        if (ipAddress == null || ipAddress.isEmpty()) {
            ipAddress = request.getRemoteAddr();
        }

        return ipAddress;
    }

    /**
     * Mapping VNPay response code sang message ti·∫øng Vi·ªát
     *
     * C√°c response code ph·ªï bi·∫øn: - 00: Th√†nh c√¥ng - 07: Tr·ª´ ti·ªÅn th√†nh c√¥ng
     * nh∆∞ng giao d·ªãch nghi ng·ªù - 09: Ch∆∞a ƒëƒÉng k√Ω Internet Banking - 10: X√°c
     * th·ª±c sai qu√° 3 l·∫ßn - 11: H·∫øt h·∫°n thanh to√°n - 12: Th·∫ª b·ªã kh√≥a - 13: Sai
     * OTP - 24: Kh√°ch h√†ng h·ªßy giao d·ªãch - 51: T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞ - 65:
     * V∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch - 75: Ng√¢n h√†ng b·∫£o tr√¨ - 79: Nh·∫≠p sai m·∫≠t
     * kh·∫©u qu√° s·ªë l·∫ßn
     *
     * @param responseCode M√£ response t·ª´ VNPay
     * @return Message ti·∫øng Vi·ªát t∆∞∆°ng ·ª©ng
     */
    public String getResponseCodeMessage(String responseCode) {
        Map<String, String> messages = new HashMap<>();

        // Success
        messages.put("00", "Giao d·ªãch th√†nh c√¥ng");
        messages.put("07", "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).");

        // Customer errors
        messages.put("09", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.");
        messages.put("10", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn");
        messages.put("11", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.");
        messages.put("12", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.");
        messages.put("13", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP).");
        messages.put("24", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch");
        messages.put("51", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.");
        messages.put("65", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.");
        messages.put("79", "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.");

        // System errors
        messages.put("75", "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.");
        messages.put("99", "C√°c l·ªói kh√°c");

        return messages.getOrDefault(responseCode, "Unknown error code: " + responseCode);
    }
}
