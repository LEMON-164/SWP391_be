package com.lemon.supershop.swp391fa25evdm.refra.VnPay.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lemon.supershop.swp391fa25evdm.refra.VnPay.model.dto.Response.VnpayRes;
import com.lemon.supershop.swp391fa25evdm.refra.VnPay.service.VnpayService;

import jakarta.servlet.http.HttpServletRequest;

/**
 * ========================================================================================
 * VNPay Payment Integration Controller
 * ========================================================================================
 * 
 * REST API Controller cho t√≠ch h·ª£p thanh to√°n VNPay - C·ªïng thanh to√°n tr·ª±c tuy·∫øn h√†ng ƒë·∫ßu VN
 * REST API Controller for VNPay payment integration - Leading online payment gateway in Vietnam
 * 
 * <p><strong>Ch·ª©c nƒÉng ch√≠nh / Main Features:</strong>
 * <ul>
 *   <li>üîó T·∫°o URL thanh to√°n VNPay / Create VNPay payment URL</li>
 *   <li>‚úÖ X√°c th·ª±c callback t·ª´ VNPay / Verify VNPay callback</li>
 *   <li>üíæ L∆∞u th√¥ng tin thanh to√°n v√†o DB / Save payment information to database</li>
 *   <li>üéØ H·ªó tr·ª£ c·∫£ tr·∫£ v·ªÅ tr·ª±c ti·∫øp & proxy qua Frontend / Support both direct return & frontend proxy</li>
 * </ul>
 * 
 * <p><strong>API Endpoints:</strong>
 * <pre>
 * POST /api/vnpay/create-payment    - T·∫°o URL thanh to√°n (Frontend g·ªçi khi user ch·ªçn VNPay)
 * GET  /api/vnpay/return             - VNPay redirect v·ªÅ ƒë√¢y (cho TEST kh√¥ng FE)
 * POST /api/vnpay/verify-payment     - Frontend g·ª≠i params t·ª´ VNPay v·ªÅ (khi c√≥ FE)
 * </pre>
 * 
 * <p><strong>Lu·ªìng thanh to√°n / Payment Flow:</strong>
 * <ol>
 *   <li>Frontend g·ªçi POST /create-payment v·ªõi orderId</li>
 *   <li>Backend t·∫°o URL ‚Üí Frontend redirect user ƒë·∫øn VNPay</li>
 *   <li>User thanh to√°n t·∫°i VNPay</li>
 *   <li><strong>Option A (TEST):</strong> VNPay redirect v·ªÅ GET /return ‚Üí Backend x·ª≠ l√Ω tr·ª±c ti·∫øp</li>
 *   <li><strong>Option B (PRODUCTION):</strong> VNPay redirect v·ªÅ Frontend ‚Üí Frontend POST /verify-payment ‚Üí Backend x·ª≠ l√Ω</li>
 * </ol>
 * 
 * @author Lemon SuperShop Team
 * @version 2.0
 * @since 2025-01-15
 * @see VnpayService
 */
@RestController
@RequestMapping("api/vnpay")
@CrossOrigin("*")  // Cho ph√©p m·ªçi origin (production n√™n gi·ªõi h·∫°n)
public class VnpayController {

    // ========================================================================================
    // DEPENDENCIES & CONFIGURATIONS
    // ========================================================================================
    
    @Autowired
    private VnpayService vnpayService;  // Service x·ª≠ l√Ω logic VNPay

    // ========================================================================================
    // PUBLIC API ENDPOINTS
    // ========================================================================================

    /**
     * ========================================================================================
     * üîó T·∫†O URL THANH TO√ÅN VNPAY / CREATE VNPAY PAYMENT URL
     * ========================================================================================
     * 
     * <p><strong>Endpoint:</strong> POST /api/vnpay/create-payment
     * 
     * <p><strong>M·ª•c ƒë√≠ch / Purpose:</strong><br>
     * T·∫°o URL thanh to√°n VNPay ƒë·ªÉ Frontend redirect user ƒëi thanh to√°n<br>
     * Generate VNPay payment URL for Frontend to redirect user to payment page
     * 
     * <p><strong>Request Parameters:</strong>
     * <ul>
     *   <li><code>orderId</code> (String, required) - M√£ ƒë∆°n h√†ng c·∫ßn thanh to√°n / Order ID to pay</li>
     *   <li><code>bankCode</code> (String, optional) - M√£ ng√¢n h√†ng (VD: NCB, VIETCOMBANK, AGRIBANK).<br>
     *       N·∫øu null ‚Üí User ch·ªçn ng√¢n h√†ng t·∫°i trang VNPay</li>
     * </ul>
     * 
     * <p><strong>Response Success:</strong>
     * <pre>
     * {
     *   "orderId": "123",
     *   "amount": 2000000,
     *   "bankCode": "NCB",
     *   "paymentUrl": "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?..."
     * }
     * </pre>
     * 
     * <p><strong>Response Error:</strong>
     * <pre>
     * {
     *   "success": false,
     *   "message": "Order not found with ID: 123"
     * }
     * </pre>
     * 
     * <p><strong>V√≠ d·ª• g·ªçi t·ª´ Frontend / Frontend Example:</strong>
     * <pre>
     * axios.post('/api/vnpay/create-payment', null, {
     *   params: { orderId: '123', bankCode: 'NCB' }
     * }).then(res => {
     *   window.location.href = res.data.paymentUrl; // Redirect ƒë·∫øn VNPay
     * });
     * </pre>
     * 
     * @param orderId M√£ ƒë∆°n h√†ng (unique) / Order ID (unique)
     * @param bankCode M√£ ng√¢n h√†ng (optional) / Bank code (optional)
     * @param request HttpServletRequest ƒë·ªÉ l·∫•y IP address
     * @return ResponseEntity ch·ª©a payment URL ho·∫∑c l·ªói
     */
    @PostMapping("/create-payment")
    public ResponseEntity<?> createPayment(
            @RequestParam String orderId,
            @RequestParam(required = false) String bankCode,
            HttpServletRequest request
    ) {
        try {
            // B∆Ø·ªöC 1: L·∫•y IP address c·ªßa client ƒë·ªÉ g·ª≠i cho VNPay
            // Get client IP address to send to VNPay
            String ipAddress = vnpayService.getIpAddress(request);
            
            // B∆Ø·ªöC 2: G·ªçi service t·∫°o payment URL
            // Call service to create payment URL
            VnpayRes response = vnpayService.createPaymentUrl(orderId, ipAddress, bankCode);
            
            System.out.println("‚úÖ Payment URL created for order: " + orderId);
            
            // B∆Ø·ªöC 3: Tr·∫£ v·ªÅ URL cho Frontend
            // Return URL to Frontend
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating payment: " + e.getMessage());
            e.printStackTrace();
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }

    /**
     * ========================================================================================
     * üìç ENDPOINT NH·∫¨N CALLBACK TR·ª∞C TI·∫æP T·ª™ VNPAY (CHO TEST KH√îNG FE)
     * üìç DIRECT CALLBACK ENDPOINT FROM VNPAY (FOR TESTING WITHOUT FRONTEND)
     * ========================================================================================
     * 
     * <p><strong>Endpoint:</strong> GET /api/vnpay/return
     * 
     * <p><strong>M·ª•c ƒë√≠ch / Purpose:</strong><br>
     * VNPay s·∫Ω redirect user v·ªÅ URL n√†y sau khi thanh to√°n xong.<br>
     * VNPay will redirect user to this URL after payment is completed.<br>
     * <strong>‚ö†Ô∏è Ch·ªâ d√πng ƒë·ªÉ TEST khi ch∆∞a c√≥ Frontend!</strong><br>
     * <strong>‚ö†Ô∏è Use this ONLY for TESTING without Frontend!</strong>
     * 
     * <p><strong>C·∫•u h√¨nh / Configuration:</strong>
     * <ul>
     *   <li>‚úÖ <strong>ƒê·ªÉ test ngay:</strong> Gi·ªØ nguy√™n <code>vnpay.return_url=http://localhost:6969/api/vnpay/return</code></li>
     *   <li>‚ö†Ô∏è <strong>Sau khi c√≥ FE:</strong> ƒê·ªïi th√†nh <code>vnpay.return_url=http://localhost:3000/payment/vnpay-return</code></li>
     * </ul>
     * 
     * <p><strong>VNPay g·ª≠i params:</strong>
     * <pre>
     * vnp_TxnRef=123_1642345678000     // orderId_timestamp
     * vnp_Amount=200000000              // S·ªë ti·ªÅn * 100
     * vnp_ResponseCode=00               // 00 = success
     * vnp_TransactionNo=14537893        // M√£ giao d·ªãch VNPay
     * vnp_BankCode=NCB                  // M√£ ng√¢n h√†ng
     * vnp_SecureHash=abc123...          // Ch·ªØ k√Ω b·∫£o m·∫≠t
     * </pre>
     * 
     * <p><strong>Response:</strong>
     * <pre>
     * {
     *   "orderId": "123",
     *   "transactionNo": "14537893",
     *   "bankCode": "NCB",
     *   "amount": 2000000,
     *   "responseCode": "00",
     *   "success": true,
     *   "message": "Giao d·ªãch th√†nh c√¥ng"
     * }
     * </pre>
     * 
     * @param params Query parameters t·ª´ VNPay (Map<String, String>)
     * @return ResponseEntity ch·ª©a k·∫øt qu·∫£ thanh to√°n
     */
    @GetMapping("/return")
    public ResponseEntity<?> handleVnpayReturn(@RequestParam Map<String, String> params) {
        System.out.println("üîî VNPay return callback received");
        System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
        System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
        
        // Delegate x·ª≠ l√Ω cho method chung
        return processPaymentCallback(params);
    }

    /**
     * ========================================================================================
     * üìç API NH·∫¨N PARAMS T·ª™ FRONTEND (KHI C√ì FRONTEND)
     * üìç API RECEIVES PARAMS FROM FRONTEND (WHEN FRONTEND EXISTS)
     * ========================================================================================
     * 
     * <p><strong>Endpoint:</strong> POST /api/vnpay/verify-payment
     * 
     * <p><strong>M·ª•c ƒë√≠ch / Purpose:</strong><br>
     * Frontend nh·∫≠n params t·ª´ URL sau khi VNPay redirect, r·ªìi POST params l√™n API n√†y ƒë·ªÉ Backend x·ª≠ l√Ω.<br>
     * Frontend receives params from URL after VNPay redirect, then POST params to this API for Backend processing.
     * 
     * <p><strong>Lu·ªìng ho·∫°t ƒë·ªông / Workflow:</strong>
     * <ol>
     *   <li>VNPay redirect user v·ªÅ: <code>http://localhost:3000/payment/vnpay-return?vnp_TxnRef=...&vnp_Amount=...</code></li>
     *   <li>Frontend parse params t·ª´ URL</li>
     *   <li>Frontend g·ªçi POST /api/vnpay/verify-payment v·ªõi params</li>
     *   <li>Backend verify signature & l∆∞u DB</li>
     *   <li>Backend tr·∫£ v·ªÅ k·∫øt qu·∫£ cho Frontend hi·ªÉn th·ªã</li>
     * </ol>
     * 
     * <p><strong>V√≠ d·ª• Frontend call / Frontend Example:</strong>
     * <pre>
     * // React/Next.js example
     * const urlParams = new URLSearchParams(window.location.search);
     * const params = Object.fromEntries(urlParams);
     * 
     * axios.post('/api/vnpay/verify-payment', null, { params })
     *   .then(res => {
     *     if (res.data.success) {
     *       showSuccessMessage(res.data.message);
     *     } else {
     *       showErrorMessage(res.data.message);
     *     }
     *   });
     * </pre>
     * 
     * @param params Query parameters t·ª´ Frontend forward t·ª´ VNPay
     * @return ResponseEntity ch·ª©a k·∫øt qu·∫£ thanh to√°n
     */
    @PostMapping("/verify-payment")
    public ResponseEntity<?> verifyPayment(@RequestParam Map<String, String> params) {
        System.out.println("üîî Verifying payment from frontend");
        System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
        System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
        
        // Delegate x·ª≠ l√Ω cho method chung
        return processPaymentCallback(params);
    }

    // ========================================================================================
    // PRIVATE HELPER METHODS
    // ========================================================================================

    /**
     * ========================================================================================
     * üîß X·ª¨ L√ù CALLBACK CHUNG (D√ông CHO C·∫¢ 2 ENDPOINT TR√äN)
     * üîß COMMON CALLBACK PROCESSING (USED BY BOTH ENDPOINTS ABOVE)
     * ========================================================================================
     * 
     * <p><strong>M·ª•c ƒë√≠ch / Purpose:</strong><br>
     * Method n√†y x·ª≠ l√Ω logic chung cho c·∫£ GET /return v√† POST /verify-payment<br>
     * This method handles common logic for both GET /return and POST /verify-payment
     * 
     * <p><strong>C√°c b∆∞·ªõc x·ª≠ l√Ω / Processing Steps:</strong>
     * <ol>
     *   <li>Verify signature VNPay (b·∫£o m·∫≠t) / Verify VNPay signature (security)</li>
     *   <li>L·∫•y th√¥ng tin giao d·ªãch t·ª´ params / Extract transaction info from params</li>
     *   <li>T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp) / Extract orderId from vnpTxnRef</li>
     *   <li>L∆∞u Payment v√†o DB / Save Payment to database</li>
     *   <li>Tr·∫£ v·ªÅ response cho caller / Return response to caller</li>
     * </ol>
     * 
     * @param params Query parameters t·ª´ VNPay (ch·ª©a vnp_TxnRef, vnp_Amount, vnp_ResponseCode...)
     * @return ResponseEntity<?>
     *         - Success: {"orderId": "123", "success": true, "message": "Giao d·ªãch th√†nh c√¥ng", ...}
     *         - Fail: {"success": false, "message": "Invalid signature"}
     */
    private ResponseEntity<?> processPaymentCallback(Map<String, String> params) {
        try {
            // B∆Ø·ªöC 1: Verify signature t·ª´ VNPay (b·∫£o m·∫≠t)
            // Verify signature from VNPay (security check)
            if (!vnpayService.verifyCallback(params)) {
                System.err.println("‚ùå Invalid signature");
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Invalid signature"
                ));
            }

            // B∆Ø·ªöC 2: L·∫•y th√¥ng tin giao d·ªãch t·ª´ params
            // Extract transaction info from params
            String vnpTxnRef = params.get("vnp_TxnRef");            // orderId_timestamp
            String vnpAmount = params.get("vnp_Amount");            // S·ªë ti·ªÅn * 100
            String vnpTransactionNo = params.get("vnp_TransactionNo");  // M√£ GD VNPay
            String vnpBankCode = params.get("vnp_BankCode");        // M√£ ng√¢n h√†ng
            String vnpResponseCode = params.get("vnp_ResponseCode");    // 00=success

            // Validate required params
            if (vnpTxnRef == null || vnpResponseCode == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Missing required parameters"
                ));
            }

            // B∆Ø·ªöC 3: T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp)
            // Extract orderId from vnpTxnRef (format: orderId_timestamp)
            // VD: "123_1642345678000" ‚Üí orderId = "123"
            String orderId = vnpTxnRef.split("_")[0];

            // B∆Ø·ªöC 4: L∆∞u payment v√†o DB (status = PAID ho·∫∑c FAILED)
            // Save payment to database (status = PAID or FAILED)
            vnpayService.savePayment(vnpTxnRef, vnpAmount, vnpTransactionNo, vnpBankCode, vnpResponseCode);

            // B∆Ø·ªöC 5: Chu·∫©n b·ªã response
            // Prepare response
            Map<String, Object> response = new HashMap<>();
            response.put("orderId", orderId);
            response.put("transactionNo", vnpTransactionNo != null ? vnpTransactionNo : "");
            response.put("bankCode", vnpBankCode);
            response.put("responseCode", vnpResponseCode);

            // Parse amount (VNPay g·ª≠i s·ªë ti·ªÅn * 100, c·∫ßn chia 100)
            if (vnpAmount != null) {
                try {
                    response.put("amount", Long.parseLong(vnpAmount) / 100);
                } catch (NumberFormatException e) {
                    response.put("amount", 0);
                }
            }

            // B∆Ø·ªöC 6: Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ª±a tr√™n responseCode
            // Return result based on responseCode
            if ("00".equals(vnpResponseCode)) {
                // ‚úÖ Thanh to√°n th√†nh c√¥ng
                response.put("success", true);
                response.put("message", "Giao d·ªãch th√†nh c√¥ng");
                System.out.println("‚úÖ Payment successful: Order " + orderId);
            } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                response.put("success", false);
                response.put("message", vnpayService.getResponseCodeMessage(vnpResponseCode));
                System.out.println("‚ùå Payment failed: Order " + orderId + " - Code: " + vnpResponseCode);
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Error processing payment callback: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "Internal error: " + e.getMessage()
            ));
        }
    }

    // ============================================
    // üì¶ CODE C≈® (ƒë√£ comment ƒë·ªÉ backup)
    // ============================================
    
    /**
     * [OLD CODE - COMMENTED]
     * Callback t·ª´ VNPay (IPN - Instant Payment Notification)
     * GET /api/vnpay/callback
     * 
     * ‚ùå Code n√†y c√≥ v·∫•n ƒë·ªÅ: Kh√¥ng l∆∞u payment v√†o DB
     */
    // @GetMapping("/callback")
    // public ResponseEntity<?> vnpayCallback(@RequestParam Map<String, String> params) {
    //     try {
    //         // Verify signature
    //         boolean isValid = vnpayService.verifyCallback(params);
    //
    //         if (!isValid) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "RspCode", "97",
    //                     "Message", "Invalid signature"
    //             ));
    //         }
    //
    //         // L·∫•y th√¥ng tin giao d·ªãch
    //         String vnp_ResponseCode = params.get("vnp_ResponseCode");
    //         String vnp_TxnRef = params.get("vnp_TxnRef"); // orderId
    //         String vnp_Amount = params.get("vnp_Amount");
    //         String vnp_TransactionNo = params.get("vnp_TransactionNo");
    //         String vnp_PayDate = params.get("vnp_PayDate");
    //
    //         // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
    //         if ("00".equals(vnp_ResponseCode)) {
    //             // Thanh to√°n th√†nh c√¥ng
    //         } else {
    //             // Thanh to√°n th·∫•t b·∫°i
    //             System.out.println("‚ùå Payment failed: " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
    //
    //             return ResponseEntity.ok(Map.of(
    //                     "RspCode", vnp_ResponseCode,
    //                     "Message", "Payment failed",
    //                     "orderId", vnp_TxnRef
    //             ));
    //         }
    //
    //     } catch (Exception e) {
    //         e.printStackTrace();
    //         return ResponseEntity.badRequest().body(Map.of(
    //                 "RspCode", "99",
    //                 "Message", "Unknown error: " + e.getMessage()
    //         ));
    //     }
    //     return ResponseEntity.ok(Map.of(
    //             "RspCode", "00",
    //             "Message", "Payment successful"
    //     ));
    // }

    /**
     * [OLD CODE - COMMENTED]
     * GET /api/vnpay/return - phi√™n b·∫£n c≈©
     * 
     * ‚ùå V·∫•n ƒë·ªÅ:
     * - Duplicate logic l∆∞u DB (ƒë√£ c√≥ trong VnpayService.savePayment)
     * - Kh√¥ng t√°ch orderId t·ª´ vnpTxnRef
     * - S·ª≠ d·ª•ng vnp_TxnRef l√†m orderId ‚Üí sai khi c√≥ timestamp
     */
    // @GetMapping("/return")
    // public ResponseEntity<?> vnpayReturnOld(@RequestParam Map<String, String> params) {
    //     try {
    //         // 1. Verify signature
    //         boolean isValid = vnpayService.verifyCallback(params);
    //
    //         if (!isValid) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "success", false,
    //                     "message", "Invalid signature"
    //             ));
    //         }
    //
    //         // 2. L·∫•y th√¥ng tin giao d·ªãch
    //         String vnp_ResponseCode = params.get("vnp_ResponseCode");
    //         String vnp_TxnRef = params.get("vnp_TxnRef");
    //         String vnp_Amount = params.get("vnp_Amount");
    //         String vnp_TransactionNo = params.get("vnp_TransactionNo");
    //         String vnp_BankCode = params.get("vnp_BankCode");
    //
    //         vnpayService.savePayment(vnp_TxnRef, vnp_Amount, vnp_TransactionNo, vnp_BankCode, vnp_ResponseCode);
    //         
    //         // 3. T√¨m Payment trong DB
    //         Optional<Payment> payment = paymentRepo.findByVnpOrderId(vnp_TxnRef);
    //         if (payment.isEmpty()) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "success", false,
    //                     "message", "Order not found"
    //             ));
    //         }
    //
    //         // 4. ‚úÖ UPDATE DB (duplicate v·ªõi savePayment)
    //         if ("00".equals(vnp_ResponseCode)) {
    //             // Thanh to√°n th√†nh c√¥ng
    //             payment.get().setPaidStatus(PaymentStatus.PAID);
    //             payment.get().setTransactionCode(vnp_TransactionNo);
    //             payment.get().setResponseCode(vnp_ResponseCode);
    //             payment.get().setBankCode(vnp_BankCode);
    //             payment.get().setUpdateAt(new Date());
    //             payment.get().setProviderResponse(params.toString());
    //             paymentRepo.save(payment.get());
    //
    //             System.out.println("‚úÖ Payment successful (return): " + vnp_TxnRef);
    //         } else {
    //             // Thanh to√°n th·∫•t b·∫°i
    //             payment.get().setPaidStatus(PaymentStatus.FAILED);
    //             payment.get().setResponseCode(vnp_ResponseCode);
    //             payment.get().setUpdateAt(new Date());
    //             payment.get().setProviderResponse(params.toString());
    //             paymentRepo.save(payment.get());
    //
    //             System.out.println("‚ùå Payment failed (return): " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
    //         }
    //
    //         // 5. Tr·∫£ v·ªÅ response cho frontend
    //         Map<String, Object> response = new HashMap<>();
    //         response.put("orderId", vnp_TxnRef);
    //         response.put("amount", Long.parseLong(vnp_Amount) / 100);
    //         response.put("transactionNo", vnp_TransactionNo);
    //         response.put("bankCode", vnp_BankCode);
    //         response.put("responseCode", vnp_ResponseCode);
    //
    //         if ("00".equals(vnp_ResponseCode)) {
    //             response.put("success", true);
    //             response.put("message", "Payment successful");
    //         } else {
    //             response.put("success", false);
    //             response.put("message", getResponseMessage(vnp_ResponseCode));
    //         }
    //
    //         return ResponseEntity.ok(response);
    //
    //     } catch (Exception e) {
    //         e.printStackTrace();
    //         return ResponseEntity.badRequest().body(Map.of(
    //                 "success", false,
    //                 "message", "Error processing return: " + e.getMessage()
    //         ));
    //     }
    // }

    /**
     * [OLD CODE - COMMENTED]
     * L·∫•y message t·ª´ response code
     * 
     * ‚úÖ ƒê√£ chuy·ªÉn sang VnpayService.getResponseCodeMessage()
     */
    // private String getResponseMessage(String responseCode) {
    //     switch (responseCode) {
    //         case "00": return "Giao d·ªãch th√†nh c√¥ng";
    //         case "07": return "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).";
    //         case "09": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.";
    //         case "10": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn";
    //         case "11": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
    //         case "12": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.";
    //         case "13": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP). Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
    //         case "24": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch";
    //         case "51": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.";
    //         case "65": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.";
    //         case "75": return "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.";
    //         case "79": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch";
    //         default: return "Giao d·ªãch th·∫•t b·∫°i";
    //     }
    // }

}
