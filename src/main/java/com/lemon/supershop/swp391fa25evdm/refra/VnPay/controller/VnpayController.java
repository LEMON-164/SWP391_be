package com.lemon.supershop.swp391fa25evdm.refra.VnPay.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lemon.supershop.swp391fa25evdm.refra.VnPay.model.dto.Response.VnpayRes;
import com.lemon.supershop.swp391fa25evdm.refra.VnPay.service.VnpayService;

import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("api/vnpay")
@CrossOrigin("*")
public class VnpayController {

    @Autowired
    private VnpayService vnpayService;

    /**
     * T·∫°o URL thanh to√°n VNPay POST /api/vnpay/create-payment
     *
     * @param orderId M√£ ƒë∆°n h√†ng (unique)
     * @param bankCode (Optional) M√£ ng√¢n h√†ng - n·∫øu null, kh√°ch ch·ªçn t·∫°i VNPay
     * VD: NCB, VIETCOMBANK, VIETINBANK, AGRIBANK, etc.
     */
    @PostMapping("/create-payment")
    public ResponseEntity<?> createPayment(
            @RequestParam String orderId,
            @RequestParam(required = false) String bankCode,
            HttpServletRequest request
    ) {
        try {
            String ipAddress = vnpayService.getIpAddress(request);
            VnpayRes response = vnpayService.createPaymentUrl(orderId, ipAddress, bankCode);
            System.out.println("‚úÖ Payment URL created for order: " + orderId);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error creating payment: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", e.getMessage()
            ));
        }
    }

    /**
     * üìç Endpoint nh·∫≠n callback tr·ª±c ti·∫øp t·ª´ VNPay (cho TEST kh√¥ng c√≥ FE)
     * GET /api/vnpay/return
     * 
     * ‚úÖ ƒê·ªÉ test ngay: Gi·ªØ nguy√™n vnpay.return_url=http://localhost:6969/api/vnpay/return
     * ‚ö†Ô∏è Sau khi c√≥ FE: ƒê·ªïi th√†nh http://localhost:3000/payment/vnpay-return
     */
    @GetMapping("/return")
    public ResponseEntity<?> handleVnpayReturn(@RequestParam Map<String, String> params) {
        System.out.println("üîî VNPay return callback received");
        System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
        System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
        
        return processPaymentCallback(params);
    }

    /**
     * üìç API ƒë·ªÉ Frontend g·ª≠i callback params t·ª´ VNPay (khi c√≥ FE)
     * POST /api/vnpay/verify-payment
     * 
     * Frontend nh·∫≠n params t·ª´ URL sau khi VNPay redirect, r·ªìi POST l√™n API n√†y
     */
    @PostMapping("/verify-payment")
    public ResponseEntity<?> verifyPayment(@RequestParam Map<String, String> params) {
        System.out.println("üîî Verifying payment from frontend");
        System.out.println("   TxnRef: " + params.get("vnp_TxnRef"));
        System.out.println("   ResponseCode: " + params.get("vnp_ResponseCode"));
        
        return processPaymentCallback(params);
    }

    /**
     * üîß X·ª≠ l√Ω callback chung (d√πng cho c·∫£ 2 endpoint tr√™n)
     */
    private ResponseEntity<?> processPaymentCallback(Map<String, String> params) {
        try {
            // 1. Verify signature
            if (!vnpayService.verifyCallback(params)) {
                System.err.println("‚ùå Invalid signature");
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Invalid signature"
                ));
            }

            // 2. L·∫•y th√¥ng tin t·ª´ VNPay
            String vnpTxnRef = params.get("vnp_TxnRef");
            String vnpAmount = params.get("vnp_Amount");
            String vnpTransactionNo = params.get("vnp_TransactionNo");
            String vnpBankCode = params.get("vnp_BankCode");
            String vnpResponseCode = params.get("vnp_ResponseCode");

            if (vnpTxnRef == null || vnpResponseCode == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Missing required parameters"
                ));
            }

            // 3. T√°ch orderId t·ª´ vnpTxnRef (format: orderId_timestamp)
            String orderId = vnpTxnRef.split("_")[0];

            // 4. L∆∞u payment v√†o DB
            vnpayService.savePayment(vnpTxnRef, vnpAmount, vnpTransactionNo, vnpBankCode, vnpResponseCode);

            // 5. Chu·∫©n b·ªã response
            Map<String, Object> response = new HashMap<>();
            response.put("orderId", orderId);
            response.put("transactionNo", vnpTransactionNo != null ? vnpTransactionNo : "");
            response.put("bankCode", vnpBankCode);
            response.put("responseCode", vnpResponseCode);

            if (vnpAmount != null) {
                try {
                    response.put("amount", Long.parseLong(vnpAmount) / 100);
                } catch (NumberFormatException e) {
                    response.put("amount", 0);
                }
            }

            // 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£
            if ("00".equals(vnpResponseCode)) {
                response.put("success", true);
                response.put("message", "Giao d·ªãch th√†nh c√¥ng");
                System.out.println("‚úÖ Payment successful: Order " + orderId);
            } else {
                response.put("success", false);
                response.put("message", vnpayService.getResponseCodeMessage(vnpResponseCode));
                System.out.println("‚ùå Payment failed: Order " + orderId + " - Code: " + vnpResponseCode);
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Error processing payment callback: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "Internal error: " + e.getMessage()
            ));
        }
    }

    // ============================================
    // üì¶ CODE C≈® (ƒë√£ comment ƒë·ªÉ backup)
    // ============================================
    
    /**
     * [OLD CODE - COMMENTED]
     * Callback t·ª´ VNPay (IPN - Instant Payment Notification)
     * GET /api/vnpay/callback
     * 
     * ‚ùå Code n√†y c√≥ v·∫•n ƒë·ªÅ: Kh√¥ng l∆∞u payment v√†o DB
     */
    // @GetMapping("/callback")
    // public ResponseEntity<?> vnpayCallback(@RequestParam Map<String, String> params) {
    //     try {
    //         // Verify signature
    //         boolean isValid = vnpayService.verifyCallback(params);
    //
    //         if (!isValid) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "RspCode", "97",
    //                     "Message", "Invalid signature"
    //             ));
    //         }
    //
    //         // L·∫•y th√¥ng tin giao d·ªãch
    //         String vnp_ResponseCode = params.get("vnp_ResponseCode");
    //         String vnp_TxnRef = params.get("vnp_TxnRef"); // orderId
    //         String vnp_Amount = params.get("vnp_Amount");
    //         String vnp_TransactionNo = params.get("vnp_TransactionNo");
    //         String vnp_PayDate = params.get("vnp_PayDate");
    //
    //         // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n
    //         if ("00".equals(vnp_ResponseCode)) {
    //             // Thanh to√°n th√†nh c√¥ng
    //         } else {
    //             // Thanh to√°n th·∫•t b·∫°i
    //             System.out.println("‚ùå Payment failed: " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
    //
    //             return ResponseEntity.ok(Map.of(
    //                     "RspCode", vnp_ResponseCode,
    //                     "Message", "Payment failed",
    //                     "orderId", vnp_TxnRef
    //             ));
    //         }
    //
    //     } catch (Exception e) {
    //         e.printStackTrace();
    //         return ResponseEntity.badRequest().body(Map.of(
    //                 "RspCode", "99",
    //                 "Message", "Unknown error: " + e.getMessage()
    //         ));
    //     }
    //     return ResponseEntity.ok(Map.of(
    //             "RspCode", "00",
    //             "Message", "Payment successful"
    //     ));
    // }

    /**
     * [OLD CODE - COMMENTED]
     * GET /api/vnpay/return - phi√™n b·∫£n c≈©
     * 
     * ‚ùå V·∫•n ƒë·ªÅ:
     * - Duplicate logic l∆∞u DB (ƒë√£ c√≥ trong VnpayService.savePayment)
     * - Kh√¥ng t√°ch orderId t·ª´ vnpTxnRef
     * - S·ª≠ d·ª•ng vnp_TxnRef l√†m orderId ‚Üí sai khi c√≥ timestamp
     */
    // @GetMapping("/return")
    // public ResponseEntity<?> vnpayReturnOld(@RequestParam Map<String, String> params) {
    //     try {
    //         // 1. Verify signature
    //         boolean isValid = vnpayService.verifyCallback(params);
    //
    //         if (!isValid) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "success", false,
    //                     "message", "Invalid signature"
    //             ));
    //         }
    //
    //         // 2. L·∫•y th√¥ng tin giao d·ªãch
    //         String vnp_ResponseCode = params.get("vnp_ResponseCode");
    //         String vnp_TxnRef = params.get("vnp_TxnRef");
    //         String vnp_Amount = params.get("vnp_Amount");
    //         String vnp_TransactionNo = params.get("vnp_TransactionNo");
    //         String vnp_BankCode = params.get("vnp_BankCode");
    //
    //         vnpayService.savePayment(vnp_TxnRef, vnp_Amount, vnp_TransactionNo, vnp_BankCode, vnp_ResponseCode);
    //         
    //         // 3. T√¨m Payment trong DB
    //         Optional<Payment> payment = paymentRepo.findByVnpOrderId(vnp_TxnRef);
    //         if (payment.isEmpty()) {
    //             return ResponseEntity.badRequest().body(Map.of(
    //                     "success", false,
    //                     "message", "Order not found"
    //             ));
    //         }
    //
    //         // 4. ‚úÖ UPDATE DB (duplicate v·ªõi savePayment)
    //         if ("00".equals(vnp_ResponseCode)) {
    //             // Thanh to√°n th√†nh c√¥ng
    //             payment.get().setPaidStatus(PaymentStatus.PAID);
    //             payment.get().setTransactionCode(vnp_TransactionNo);
    //             payment.get().setResponseCode(vnp_ResponseCode);
    //             payment.get().setBankCode(vnp_BankCode);
    //             payment.get().setUpdateAt(new Date());
    //             payment.get().setProviderResponse(params.toString());
    //             paymentRepo.save(payment.get());
    //
    //             System.out.println("‚úÖ Payment successful (return): " + vnp_TxnRef);
    //         } else {
    //             // Thanh to√°n th·∫•t b·∫°i
    //             payment.get().setPaidStatus(PaymentStatus.FAILED);
    //             payment.get().setResponseCode(vnp_ResponseCode);
    //             payment.get().setUpdateAt(new Date());
    //             payment.get().setProviderResponse(params.toString());
    //             paymentRepo.save(payment.get());
    //
    //             System.out.println("‚ùå Payment failed (return): " + vnp_TxnRef + " - Code: " + vnp_ResponseCode);
    //         }
    //
    //         // 5. Tr·∫£ v·ªÅ response cho frontend
    //         Map<String, Object> response = new HashMap<>();
    //         response.put("orderId", vnp_TxnRef);
    //         response.put("amount", Long.parseLong(vnp_Amount) / 100);
    //         response.put("transactionNo", vnp_TransactionNo);
    //         response.put("bankCode", vnp_BankCode);
    //         response.put("responseCode", vnp_ResponseCode);
    //
    //         if ("00".equals(vnp_ResponseCode)) {
    //             response.put("success", true);
    //             response.put("message", "Payment successful");
    //         } else {
    //             response.put("success", false);
    //             response.put("message", getResponseMessage(vnp_ResponseCode));
    //         }
    //
    //         return ResponseEntity.ok(response);
    //
    //     } catch (Exception e) {
    //         e.printStackTrace();
    //         return ResponseEntity.badRequest().body(Map.of(
    //                 "success", false,
    //                 "message", "Error processing return: " + e.getMessage()
    //         ));
    //     }
    // }

    /**
     * [OLD CODE - COMMENTED]
     * L·∫•y message t·ª´ response code
     * 
     * ‚úÖ ƒê√£ chuy·ªÉn sang VnpayService.getResponseCodeMessage()
     */
    // private String getResponseMessage(String responseCode) {
    //     switch (responseCode) {
    //         case "00": return "Giao d·ªãch th√†nh c√¥ng";
    //         case "07": return "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).";
    //         case "09": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.";
    //         case "10": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn";
    //         case "11": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
    //         case "12": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.";
    //         case "13": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP). Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.";
    //         case "24": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch";
    //         case "51": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.";
    //         case "65": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.";
    //         case "75": return "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.";
    //         case "79": return "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch";
    //         default: return "Giao d·ªãch th·∫•t b·∫°i";
    //     }
    // }

}
